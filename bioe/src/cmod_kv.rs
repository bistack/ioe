/* automatically generated by rust-bindgen */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct db {
    _unused: [u8; 0],
}
pub type kvnvmedb_t = db;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kv_comparator {
    pub state: *mut ::std::os::raw::c_void,
    pub destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub compare: ::std::option::Option<
        unsafe extern "C" fn(
            state: *mut ::std::os::raw::c_void,
            a: *const ::std::os::raw::c_char,
            alen: usize,
            b: *const ::std::os::raw::c_char,
            blen: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub name: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_kv_comparator() {
    assert_eq!(
        ::std::mem::size_of::<kv_comparator>(),
        32usize,
        concat!("Size of: ", stringify!(kv_comparator))
    );
    assert_eq!(
        ::std::mem::align_of::<kv_comparator>(),
        8usize,
        concat!("Alignment of ", stringify!(kv_comparator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_comparator>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_comparator),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_comparator>())).destructor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_comparator),
            "::",
            stringify!(destructor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_comparator>())).compare as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_comparator),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_comparator>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_comparator),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kv_merge {
    pub state: *mut ::std::os::raw::c_void,
    pub merge_func: ::std::option::Option<
        unsafe extern "C" fn(
            state: *mut ::std::os::raw::c_void,
            key: *const ::std::os::raw::c_char,
            keylen: usize,
            old_val: *const ::std::os::raw::c_char,
            old_vallen: usize,
            merge_val: *const ::std::os::raw::c_char,
            merge_vallen: usize,
            val_out: *mut *mut ::std::os::raw::c_char,
            vallen_out: *mut usize,
        ),
    >,
}
#[test]
fn bindgen_test_layout_kv_merge() {
    assert_eq!(
        ::std::mem::size_of::<kv_merge>(),
        16usize,
        concat!("Size of: ", stringify!(kv_merge))
    );
    assert_eq!(
        ::std::mem::align_of::<kv_merge>(),
        8usize,
        concat!("Alignment of ", stringify!(kv_merge))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_merge>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_merge),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_merge>())).merge_func as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_merge),
            "::",
            stringify!(merge_func)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kv_compaction_filter {
    pub state: *mut ::std::os::raw::c_void,
    pub filter_func: ::std::option::Option<
        unsafe extern "C" fn(
            state: *mut ::std::os::raw::c_void,
            key: *const ::std::os::raw::c_char,
            keylen: usize,
            val: *const ::std::os::raw::c_char,
            vallen: usize,
            val_out: *mut *mut ::std::os::raw::c_char,
            vallen_out: *mut usize,
            value_changed: *mut bool,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_kv_compaction_filter() {
    assert_eq!(
        ::std::mem::size_of::<kv_compaction_filter>(),
        16usize,
        concat!("Size of: ", stringify!(kv_compaction_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<kv_compaction_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(kv_compaction_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_compaction_filter>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_compaction_filter),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kv_compaction_filter>())).filter_func as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_compaction_filter),
            "::",
            stringify!(filter_func)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kv_cache {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kv_options {
    pub create_if_missing: ::std::os::raw::c_uchar,
    pub error_if_exists: ::std::os::raw::c_uchar,
    pub memory_index: ::std::os::raw::c_uchar,
    pub low_level_fmt: ::std::os::raw::c_uchar,
    pub dirty_ratio_thr: f64,
    pub memtable_size: u64,
    pub wal_ver_gap: u64,
    pub wal_sec_gap: u64,
    pub wal_cache_size: u32,
    pub wal_pre_rd_size: u32,
    pub cp_downloader_threadnum: u32,
    pub comparator: *mut kv_comparator,
    pub merge: *mut kv_merge,
    pub compaction_filter: *mut kv_compaction_filter,
    pub cache: *mut kv_cache,
    pub iostat_path: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_kv_options() {
    assert_eq!(
        ::std::mem::size_of::<kv_options>(),
        96usize,
        concat!("Size of: ", stringify!(kv_options))
    );
    assert_eq!(
        ::std::mem::align_of::<kv_options>(),
        8usize,
        concat!("Alignment of ", stringify!(kv_options))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).create_if_missing as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(create_if_missing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).error_if_exists as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(error_if_exists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).memory_index as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(memory_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).low_level_fmt as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(low_level_fmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).dirty_ratio_thr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(dirty_ratio_thr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).memtable_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(memtable_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).wal_ver_gap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(wal_ver_gap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).wal_sec_gap as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(wal_sec_gap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).wal_cache_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(wal_cache_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).wal_pre_rd_size as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(wal_pre_rd_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kv_options>())).cp_downloader_threadnum as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(cp_downloader_threadnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).comparator as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(comparator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).merge as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(merge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).compaction_filter as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(compaction_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).cache as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_options>())).iostat_path as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_options),
            "::",
            stringify!(iostat_path)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list {
    pub prev: *mut list,
    pub next: *mut list,
}
#[test]
fn bindgen_test_layout_list() {
    assert_eq!(
        ::std::mem::size_of::<list>(),
        16usize,
        concat!("Size of: ", stringify!(list))
    );
    assert_eq!(
        ::std::mem::align_of::<list>(),
        8usize,
        concat!("Alignment of ", stringify!(list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(list),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(list),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kv_snapshot {
    pub seqnum: u64,
    pub list: list,
}
#[test]
fn bindgen_test_layout_kv_snapshot() {
    assert_eq!(
        ::std::mem::size_of::<kv_snapshot>(),
        24usize,
        concat!("Size of: ", stringify!(kv_snapshot))
    );
    assert_eq!(
        ::std::mem::align_of::<kv_snapshot>(),
        8usize,
        concat!("Alignment of ", stringify!(kv_snapshot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_snapshot>())).seqnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_snapshot),
            "::",
            stringify!(seqnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_snapshot>())).list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_snapshot),
            "::",
            stringify!(list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kv_write_options {
    pub sync: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_kv_write_options() {
    assert_eq!(
        ::std::mem::size_of::<kv_write_options>(),
        1usize,
        concat!("Size of: ", stringify!(kv_write_options))
    );
    assert_eq!(
        ::std::mem::align_of::<kv_write_options>(),
        1usize,
        concat!("Alignment of ", stringify!(kv_write_options))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_write_options>())).sync as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_write_options),
            "::",
            stringify!(sync)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kv_read_options {
    pub version: *mut kv_snapshot,
}
#[test]
fn bindgen_test_layout_kv_read_options() {
    assert_eq!(
        ::std::mem::size_of::<kv_read_options>(),
        8usize,
        concat!("Size of: ", stringify!(kv_read_options))
    );
    assert_eq!(
        ::std::mem::align_of::<kv_read_options>(),
        8usize,
        concat!("Alignment of ", stringify!(kv_read_options))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kv_read_options>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kv_read_options),
            "::",
            stringify!(version)
        )
    );
}
pub type kvnvme_options_t = kv_options;
pub type kvnvme_writeoptions_t = kv_write_options;
pub type kvnvme_readoptions_t = kv_read_options;
extern "C" {
    pub fn kvnvme_open(
        options: *const kvnvme_options_t,
        dbname: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut kvnvmedb_t;
}
extern "C" {
    pub fn kvnvme_close(db: *mut kvnvmedb_t);
}
extern "C" {
    pub fn kvnvme_dbname(db: *mut kvnvmedb_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kvnvme_close_err(db: *mut kvnvmedb_t, errptr: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn kvnvme_put(
        db: *mut kvnvmedb_t,
        options: *const kvnvme_writeoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        val: *const ::std::os::raw::c_char,
        vallen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn kvnvme_delete(
        db: *mut kvnvmedb_t,
        options: *const kvnvme_writeoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn kvnvme_get(
        db: *mut kvnvmedb_t,
        options: *const kvnvme_readoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        vallen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
